package com.company;// Java program to find shortest path in an undirected
// graph
import java.util.*;

public class GraphBfss {
    public GraphBfss(Graph graph) {
         graph = graph;
    }




    public static class Node {

        int value;
        List<String> neighbors;

        public Node(int value) {
            this.value = value;
            neighbors = new ArrayList<String>();
        }

        public void addEdge(String to) {
            neighbors.add(to);
        }
//    // Driver Program
//    public static void main(String args[])
//    {
//        // No of vertices
//        int v = 8;
//
//        // Adjacency list for storing which vertices are connected
//        ArrayList<ArrayList<Integer>> adj =
//                new ArrayList<ArrayList<Integer>>(v);
//        for (int i = 0; i < v; i++) {
//            adj.add(new ArrayList<Integer>());
//        }
//
//        // Creating graph given in the above diagram.
//        // add_edge function takes adjacency list, source
//        // and destination vertex as argument and forms
//        // an edge between them.
//        addEdge(adj, 0, 1);
//        addEdge(adj, 0, 3);
//        addEdge(adj, 1, 2);
//        addEdge(adj, 3, 4);
//        addEdge(adj, 3, 7);
//        addEdge(adj, 4, 5);
//        addEdge(adj, 4, 6);
//        addEdge(adj, 4, 7);
//        addEdge(adj, 5, 6);
//        addEdge(adj, 6, 7);
//        int source = 0, dest = 7;
//        printShortestDistance(adj, source, dest, v);
//    }

//    // function to form edge between two vertices
//    // source and dest
//    private static void addEdge(ArrayList<ArrayList<Integer>> adj, int i, int j)
//    {
//        adj.get(i).add(j);
//        adj.get(j).add(i);
//    }

        // function to print the shortest distance and path
        // between source vertex and destination vertex
        private static void printShortestDistance(String s, String dest) {
            public int v;

            // predecessor[i] array stores predecessor of
            // i and distance array stores distance of i
            // from s
            int pred[] = new int[v];
            int dist[] = new int[v];

            if (bfs( s) == false) {
                System.out.println("Given source and destination" +
                        "are not connected");
                return;
            }

            // LinkedList to store path
            LinkedList<Integer> path = new LinkedList<Integer>();
            int crawl = graph.getIndex(dest);
            path.add(crawl);
            while (pred[crawl] != -1) {
                path.add(pred[crawl]);
                crawl = pred[crawl];
            }

            // Print distance
            System.out.println("Shortest path length is: " + dist[graph.getIndex(dest)]);

            // Print path
            System.out.println("Path is ::");
            for (int i = path.size() - 1; i >= 0; i--) {
                System.out.print(path.get(i) + " ");
            }
        }



        /*/
        Initialize a queue
        Initialize a visited hash set (this is just one way to keep track of visited nodes)
        Add start node to queue.
        Add start node's value to visited set.
        While the queue's size is not empty:
		Remove a node.
		Print the node's value.
		Add all unvisited neighbors into the queue and visited set.end
         */

        public static void bfs(String startNode) {
            Graph<String> graph = new Graph<>();
            Queue<String> queue = new LinkedList<>();
            Set<Integer> visited = new HashSet<>();
            int index = graph.getIndex(startNode);

            queue.add(startNode);
            visited.add(index);

            while (!queue.isEmpty()) {
                String currentNode = queue.remove();
                System.out.println(graph.getIndex(currentNode));
                //HashSet<String> currentNode = new HashSet<>();

                for (String n : currentNode.) { // Check each neighbor node
                    if (!visited.contains(n.value)) { // If neighbor node's value is not in visited set
                        queue.add(n);
                        visited.add(n.value);
                    }
                }
            }
        }
    }


}

